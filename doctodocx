import shutil

import subprocess

from pathlib import Path

from tqdm import tqdm

import multiprocessing

def convert_or_copy_file(doc_path: Path, output_folder_path: Path):

    """

    将一个docx文件转换为doc文件或者复制一个doc文件到指定的输出目录。

    Args:

        doc_path (Path): 要处理的docx或者doc文件的完整路径

        output_folder_path (Path): 输出目录的完整路径

    """

    try:

        # 构造输出文件的完整路径

        output_path = output_folder_path / doc_path.name

        

        # 如果输出文件已存在，则跳过处理

        if output_path.exists():

            print(f"文件 {doc_path} 已存在于输出目录中，跳过处理。")

            return

        # 如果是doc文件，则直接复制到输出目录

        if doc_path.suffix == '.doc':

            shutil.copy(doc_path.as_posix(), output_path.as_posix())

            print(f"文件 {doc_path} 已复制到输出目录。")

        

        # 如果是docx文件，则使用LibreOffice将其转换为doc文件

        elif doc_path.suffix == '.docx':

            # 构造LibreOffice转换命令的参数

            command = ['libreoffice', '--headless', '--convert-to', 'doc', '--outdir', output_folder_path.as_posix(), doc_path.as_posix()]

            result = subprocess.run(command, capture_output=True)

            # 如果转换成功，则移动输出文件到输出目录，并删除原始docx文件

            if result.returncode == 0:

                output_doc_path = output_folder_path / (doc_path.stem + '.doc')

                if output_doc_path.exists():

                    print(f"文件 {doc_path} 已处理并移动到输出目录。")

                else:

                    print(f"处理文件 {doc_path} 时发生错误：未找到输出文件。")

            # 如果转换失败，则记录错误日志

            else:

                print(f"处理文件 {doc_path} 时发生错误：{result.stderr.decode()}")

    

    # 如果处理过程中发生异常，则记录错误日志

    except Exception as e:

        print(f"处理文件 {doc_path} 时发生错误：{e}")

if __name__ == '__main__':

    # 定义文件夹路径

    folder_path = Path('/media/zxd/DATA1/3')

    output_folder_path = Path('/media/zxd/DATA1/2/5')

    # 获取文件夹中所有doc和docx文件的路径列表

    doc_files = list(folder_path.glob('*.doc*'))

    # 使用多进程并行处理所有文件

    with multiprocessing.Pool(processes=multiprocessing.cpu_count()) as pool:

        # 对于每个文件，提交一个进程进行处理

        for doc_file in tqdm(doc_files, desc='处理文件中'):

            pool.apply_async(convert_or_copy_file, args=(doc_file, output_folder_path))

        # 关闭进程池并等待所有进程完成

        pool.close()

        pool.join()

